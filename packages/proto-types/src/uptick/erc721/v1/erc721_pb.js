// source: uptick/erc721/v1/erc721.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_nft_v1beta1_nft_pb = require('../../../cosmos/nft/v1beta1/nft_pb.js');
goog.object.extend(proto, cosmos_nft_v1beta1_nft_pb);
goog.exportSymbol('proto.uptick.erc721.v1.Owner', null, global);
goog.exportSymbol('proto.uptick.erc721.v1.RegisterERC721Proposal', null, global);
goog.exportSymbol('proto.uptick.erc721.v1.RegisterNFTProposal', null, global);
goog.exportSymbol('proto.uptick.erc721.v1.ToggleTokenConversionProposal', null, global);
goog.exportSymbol('proto.uptick.erc721.v1.TokenPair', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uptick.erc721.v1.TokenPair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uptick.erc721.v1.TokenPair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uptick.erc721.v1.TokenPair.displayName = 'proto.uptick.erc721.v1.TokenPair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uptick.erc721.v1.RegisterNFTProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uptick.erc721.v1.RegisterNFTProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uptick.erc721.v1.RegisterNFTProposal.displayName = 'proto.uptick.erc721.v1.RegisterNFTProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uptick.erc721.v1.RegisterERC721Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uptick.erc721.v1.RegisterERC721Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uptick.erc721.v1.RegisterERC721Proposal.displayName = 'proto.uptick.erc721.v1.RegisterERC721Proposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uptick.erc721.v1.ToggleTokenConversionProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.uptick.erc721.v1.ToggleTokenConversionProposal.displayName = 'proto.uptick.erc721.v1.ToggleTokenConversionProposal';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uptick.erc721.v1.TokenPair.prototype.toObject = function(opt_includeInstance) {
  return proto.uptick.erc721.v1.TokenPair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uptick.erc721.v1.TokenPair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uptick.erc721.v1.TokenPair.toObject = function(includeInstance, msg) {
  var f, obj = {
    erc721Address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    classId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    contractOwner: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uptick.erc721.v1.TokenPair}
 */
proto.uptick.erc721.v1.TokenPair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uptick.erc721.v1.TokenPair;
  return proto.uptick.erc721.v1.TokenPair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uptick.erc721.v1.TokenPair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uptick.erc721.v1.TokenPair}
 */
proto.uptick.erc721.v1.TokenPair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setErc721Address(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 4:
      var value = /** @type {!proto.uptick.erc721.v1.Owner} */ (reader.readEnum());
      msg.setContractOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uptick.erc721.v1.TokenPair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uptick.erc721.v1.TokenPair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uptick.erc721.v1.TokenPair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uptick.erc721.v1.TokenPair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErc721Address();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClassId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getContractOwner();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string erc721_address = 1;
 * @return {string}
 */
proto.uptick.erc721.v1.TokenPair.prototype.getErc721Address = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.uptick.erc721.v1.TokenPair} returns this
 */
proto.uptick.erc721.v1.TokenPair.prototype.setErc721Address = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string class_id = 2;
 * @return {string}
 */
proto.uptick.erc721.v1.TokenPair.prototype.getClassId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.uptick.erc721.v1.TokenPair} returns this
 */
proto.uptick.erc721.v1.TokenPair.prototype.setClassId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool enabled = 3;
 * @return {boolean}
 */
proto.uptick.erc721.v1.TokenPair.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.uptick.erc721.v1.TokenPair} returns this
 */
proto.uptick.erc721.v1.TokenPair.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional Owner contract_owner = 4;
 * @return {!proto.uptick.erc721.v1.Owner}
 */
proto.uptick.erc721.v1.TokenPair.prototype.getContractOwner = function() {
  return /** @type {!proto.uptick.erc721.v1.Owner} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.uptick.erc721.v1.Owner} value
 * @return {!proto.uptick.erc721.v1.TokenPair} returns this
 */
proto.uptick.erc721.v1.TokenPair.prototype.setContractOwner = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uptick.erc721.v1.RegisterNFTProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.uptick.erc721.v1.RegisterNFTProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uptick.erc721.v1.RegisterNFTProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uptick.erc721.v1.RegisterNFTProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pb_class: (f = msg.getClass()) && cosmos_nft_v1beta1_nft_pb.Class.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uptick.erc721.v1.RegisterNFTProposal}
 */
proto.uptick.erc721.v1.RegisterNFTProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uptick.erc721.v1.RegisterNFTProposal;
  return proto.uptick.erc721.v1.RegisterNFTProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uptick.erc721.v1.RegisterNFTProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uptick.erc721.v1.RegisterNFTProposal}
 */
proto.uptick.erc721.v1.RegisterNFTProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new cosmos_nft_v1beta1_nft_pb.Class;
      reader.readMessage(value,cosmos_nft_v1beta1_nft_pb.Class.deserializeBinaryFromReader);
      msg.setClass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uptick.erc721.v1.RegisterNFTProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uptick.erc721.v1.RegisterNFTProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uptick.erc721.v1.RegisterNFTProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uptick.erc721.v1.RegisterNFTProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClass();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cosmos_nft_v1beta1_nft_pb.Class.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.uptick.erc721.v1.RegisterNFTProposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.uptick.erc721.v1.RegisterNFTProposal} returns this
 */
proto.uptick.erc721.v1.RegisterNFTProposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.uptick.erc721.v1.RegisterNFTProposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.uptick.erc721.v1.RegisterNFTProposal} returns this
 */
proto.uptick.erc721.v1.RegisterNFTProposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional cosmos.nft.v1beta1.Class class = 3;
 * @return {?proto.cosmos.nft.v1beta1.Class}
 */
proto.uptick.erc721.v1.RegisterNFTProposal.prototype.getClass = function() {
  return /** @type{?proto.cosmos.nft.v1beta1.Class} */ (
    jspb.Message.getWrapperField(this, cosmos_nft_v1beta1_nft_pb.Class, 3));
};


/**
 * @param {?proto.cosmos.nft.v1beta1.Class|undefined} value
 * @return {!proto.uptick.erc721.v1.RegisterNFTProposal} returns this
*/
proto.uptick.erc721.v1.RegisterNFTProposal.prototype.setClass = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.uptick.erc721.v1.RegisterNFTProposal} returns this
 */
proto.uptick.erc721.v1.RegisterNFTProposal.prototype.clearClass = function() {
  return this.setClass(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uptick.erc721.v1.RegisterNFTProposal.prototype.hasClass = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.uptick.erc721.v1.RegisterERC721Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uptick.erc721.v1.RegisterERC721Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    erc721address: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uptick.erc721.v1.RegisterERC721Proposal}
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uptick.erc721.v1.RegisterERC721Proposal;
  return proto.uptick.erc721.v1.RegisterERC721Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uptick.erc721.v1.RegisterERC721Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uptick.erc721.v1.RegisterERC721Proposal}
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErc721address(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uptick.erc721.v1.RegisterERC721Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uptick.erc721.v1.RegisterERC721Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getErc721address();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.uptick.erc721.v1.RegisterERC721Proposal} returns this
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.uptick.erc721.v1.RegisterERC721Proposal} returns this
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string erc721address = 3;
 * @return {string}
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.prototype.getErc721address = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.uptick.erc721.v1.RegisterERC721Proposal} returns this
 */
proto.uptick.erc721.v1.RegisterERC721Proposal.prototype.setErc721address = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.uptick.erc721.v1.ToggleTokenConversionProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uptick.erc721.v1.ToggleTokenConversionProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    token: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uptick.erc721.v1.ToggleTokenConversionProposal}
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.uptick.erc721.v1.ToggleTokenConversionProposal;
  return proto.uptick.erc721.v1.ToggleTokenConversionProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uptick.erc721.v1.ToggleTokenConversionProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uptick.erc721.v1.ToggleTokenConversionProposal}
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.uptick.erc721.v1.ToggleTokenConversionProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uptick.erc721.v1.ToggleTokenConversionProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.uptick.erc721.v1.ToggleTokenConversionProposal} returns this
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.uptick.erc721.v1.ToggleTokenConversionProposal} returns this
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string token = 3;
 * @return {string}
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.uptick.erc721.v1.ToggleTokenConversionProposal} returns this
 */
proto.uptick.erc721.v1.ToggleTokenConversionProposal.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.uptick.erc721.v1.Owner = {
  OWNER_UNSPECIFIED: 0,
  OWNER_MODULE: 1,
  OWNER_EXTERNAL: 2
};

goog.object.extend(exports, proto.uptick.erc721.v1);
